/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.headguardheaven.view;

import com.headguardheaven.controller.BinarySearchAlgorithm;
import com.headguardheaven.controller.InsertionSort;
import com.headguardheaven.controller.SelectionSort;
import com.headguardheaven.model.HelmetModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HP
 */
public class HeadGuard_Heaven extends javax.swing.JFrame {

    /**
     * Creates new form HeadGuard_Heaven
     */
    HelmetModel[] modelArray;
    
    int helmetId = 0, price = 0, helmetWeight = 0;
        String helmetSize = "", material = "", brand = "", color = "",
        helmet_type = "", supplier = "", visorType = "";

    public HeadGuard_Heaven() {
        initComponents();
        initializeModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        pnlTitle = new javax.swing.JPanel();
        lblHelmetTitle = new javax.swing.JLabel();
        spHelmets = new javax.swing.JScrollPane();
        tblHelmet = new javax.swing.JTable();
        tfBinarySearch = new javax.swing.JTextField();
        btnBinarySearch = new javax.swing.JButton();
        cbBinarySearch = new javax.swing.JComboBox<>();
        pnlUpdateData = new javax.swing.JPanel();
        tfAddId = new javax.swing.JTextField();
        tfAddBrand = new javax.swing.JTextField();
        tfAddPrice = new javax.swing.JTextField();
        tfAddMaterial = new javax.swing.JTextField();
        tfAddWeight = new javax.swing.JTextField();
        tfAddColor = new javax.swing.JTextField();
        tfAddSupplier = new javax.swing.JTextField();
        tfVisorType = new javax.swing.JTextField();
        cbAddSize = new javax.swing.JComboBox<>();
        cbAddHelType = new javax.swing.JComboBox<>();
        btnAddData = new javax.swing.JButton();
        btnDeleteData = new javax.swing.JButton();
        btnModifyData = new javax.swing.JButton();
        btnHelmIDSort = new javax.swing.JButton();
        btnBrandSelectionSort = new javax.swing.JButton();
        btnSizeSelectionSort = new javax.swing.JButton();
        btnPriceInsertionSort = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlMain.setBackground(new java.awt.Color(30, 61, 89));

        pnlTitle.setBackground(new java.awt.Color(245, 240, 225));
        pnlTitle.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N

        lblHelmetTitle.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        lblHelmetTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/headguardheaven/view/helmet.png"))); // NOI18N
        lblHelmetTitle.setText("HeadGuard Heaven");

        javax.swing.GroupLayout pnlTitleLayout = new javax.swing.GroupLayout(pnlTitle);
        pnlTitle.setLayout(pnlTitleLayout);
        pnlTitleLayout.setHorizontalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTitleLayout.createSequentialGroup()
                .addGap(382, 382, 382)
                .addComponent(lblHelmetTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlTitleLayout.setVerticalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHelmetTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tblHelmet.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N
        tblHelmet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(1), "AGV",  new Integer(30000), "Large", "Thermoplastic",  new Integer(1500), "Blue", "Full Face", "Moto World", "Iridium Gold"},
                { new Integer(2), "Shoe",  new Integer(11000), "Medium", "Polycarbonate",  new Integer(1550), "Matte Black", "Full Face", "Ubuy Nepal", "Light Smoke"},
                { new Integer(6), "Vega",  new Integer(2500), "Medium", "â€ŽPlastic",  new Integer(850), "Black/Red", "Half Face", "Vega Helmets", "Clear"},
                { new Integer(4), "Studds",  new Integer(4000), "Small", "Plastic",  new Integer(1300), "Matte Black", "Full Face", "Thirdwheel", "Mercury"},
                { new Integer(3), "LS2",  new Integer(8000), "Large", "Polycarbonate",  new Integer(1320), "Gloss Black", "Full Face", "Moto World", "Smoke silver"}
            },
            new String [] {
                "Helmet ID", "Brand", "Price (Rs.)", "Size", "Materials", "Weight (grams)", "Color", "Helmet Type", "Supplier", "Visor Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        spHelmets.setViewportView(tblHelmet);

        tfBinarySearch.setBackground(new java.awt.Color(242, 242, 242));
        tfBinarySearch.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        tfBinarySearch.setBorder(javax.swing.BorderFactory.createTitledBorder("Search in Table"));

        btnBinarySearch.setBackground(new java.awt.Color(245, 240, 225));
        btnBinarySearch.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        btnBinarySearch.setText("Search");
        btnBinarySearch.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true));
        btnBinarySearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBinarySearchActionPerformed(evt);
            }
        });

        cbBinarySearch.setBackground(new java.awt.Color(242, 242, 242));
        cbBinarySearch.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N
        cbBinarySearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Helmet ID", "Brand", "Price" }));

        pnlUpdateData.setBackground(new java.awt.Color(245, 240, 225));
        pnlUpdateData.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Update Data", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Malgun Gothic", 1, 18))); // NOI18N

        tfAddId.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N
        tfAddId.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Helmet ID", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Malgun Gothic", 1, 12))); // NOI18N

        tfAddBrand.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N
        tfAddBrand.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Brand", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Malgun Gothic", 1, 12))); // NOI18N

        tfAddPrice.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N
        tfAddPrice.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Price", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Malgun Gothic", 1, 12))); // NOI18N

        tfAddMaterial.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N
        tfAddMaterial.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Materials", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Malgun Gothic", 1, 12))); // NOI18N

        tfAddWeight.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N
        tfAddWeight.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Weight", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Malgun Gothic", 1, 12))); // NOI18N

        tfAddColor.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N
        tfAddColor.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Color", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Malgun Gothic", 1, 12))); // NOI18N

        tfAddSupplier.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N
        tfAddSupplier.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Supplier", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Malgun Gothic", 1, 12))); // NOI18N

        tfVisorType.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N
        tfVisorType.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Visor Type", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Malgun Gothic", 1, 12))); // NOI18N

        cbAddSize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Large", "Medium", "Small", " " }));
        cbAddSize.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Size", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Malgun Gothic", 1, 12))); // NOI18N

        cbAddHelType.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N
        cbAddHelType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Full Face", "Half Face", " " }));
        cbAddHelType.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Helmet Type", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Malgun Gothic", 1, 12))); // NOI18N

        btnAddData.setBackground(new java.awt.Color(30, 61, 89));
        btnAddData.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        btnAddData.setForeground(new java.awt.Color(255, 255, 255));
        btnAddData.setText("Add");
        btnAddData.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        btnAddData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDataActionPerformed(evt);
            }
        });

        btnDeleteData.setBackground(new java.awt.Color(30, 61, 89));
        btnDeleteData.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        btnDeleteData.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteData.setText("Delete");
        btnDeleteData.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        btnDeleteData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDataActionPerformed(evt);
            }
        });

        btnModifyData.setBackground(new java.awt.Color(30, 61, 89));
        btnModifyData.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        btnModifyData.setForeground(new java.awt.Color(255, 255, 255));
        btnModifyData.setText("Modify");
        btnModifyData.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        btnModifyData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlUpdateDataLayout = new javax.swing.GroupLayout(pnlUpdateData);
        pnlUpdateData.setLayout(pnlUpdateDataLayout);
        pnlUpdateDataLayout.setHorizontalGroup(
            pnlUpdateDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUpdateDataLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(pnlUpdateDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlUpdateDataLayout.createSequentialGroup()
                        .addComponent(tfAddColor, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tfAddSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tfVisorType, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(btnAddData, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteData, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnModifyData, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlUpdateDataLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(pnlUpdateDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlUpdateDataLayout.createSequentialGroup()
                                .addComponent(tfAddId, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(tfAddBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(tfAddPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(cbAddSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlUpdateDataLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tfAddMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(tfAddWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbAddHelType, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlUpdateDataLayout.setVerticalGroup(
            pnlUpdateDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUpdateDataLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlUpdateDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlUpdateDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfAddMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tfAddId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tfAddBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tfAddPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbAddSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tfAddWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cbAddHelType, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlUpdateDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfVisorType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlUpdateDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfAddSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tfAddColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlUpdateDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAddData, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDeleteData, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnModifyData, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15))
        );

        btnHelmIDSort.setBackground(new java.awt.Color(245, 240, 225));
        btnHelmIDSort.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        btnHelmIDSort.setText("Insertion Sort by Helmet ID");
        btnHelmIDSort.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        btnHelmIDSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelmIDSortActionPerformed(evt);
            }
        });

        btnBrandSelectionSort.setBackground(new java.awt.Color(245, 240, 225));
        btnBrandSelectionSort.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        btnBrandSelectionSort.setText("Selection Sort by Brand");
        btnBrandSelectionSort.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        btnBrandSelectionSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrandSelectionSortActionPerformed(evt);
            }
        });

        btnSizeSelectionSort.setBackground(new java.awt.Color(245, 240, 225));
        btnSizeSelectionSort.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        btnSizeSelectionSort.setText("Selection Sort by Size");
        btnSizeSelectionSort.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        btnSizeSelectionSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSizeSelectionSortActionPerformed(evt);
            }
        });

        btnPriceInsertionSort.setBackground(new java.awt.Color(245, 240, 225));
        btnPriceInsertionSort.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        btnPriceInsertionSort.setText("Insertion Sort by Price");
        btnPriceInsertionSort.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        btnPriceInsertionSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPriceInsertionSortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(pnlTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlMainLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spHelmets, javax.swing.GroupLayout.PREFERRED_SIZE, 966, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlUpdateData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 45, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlMainLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbBinarySearch, 0, 127, Short.MAX_VALUE)
                    .addComponent(btnBinarySearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28)
                .addComponent(tfBinarySearch)
                .addGap(34, 34, 34)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnBrandSelectionSort, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHelmIDSort, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSizeSelectionSort, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPriceInsertionSort, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(68, 68, 68))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addComponent(pnlTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnHelmIDSort, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSizeSelectionSort, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBrandSelectionSort, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPriceInsertionSort, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(pnlMainLayout.createSequentialGroup()
                            .addComponent(cbBinarySearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBinarySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(tfBinarySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addComponent(spHelmets, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(pnlUpdateData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initializeModel() {
        // Initialize the model with data from the table
        modelArray = new HelmetModel[tblHelmet.getRowCount()];

        for (int i = 0; i < tblHelmet.getRowCount(); i++) {
            // Extract helmet details from the table
            helmetId = (int) tblHelmet.getValueAt(i, 0);
            brand = (String) tblHelmet.getValueAt(i, 1);
            price = (int) tblHelmet.getValueAt(i, 2);
            helmetSize = (String) tblHelmet.getValueAt(i, 3);
            material = (String) tblHelmet.getValueAt(i, 4);
            helmetWeight = (int) tblHelmet.getValueAt(i, 5);
            color = (String) tblHelmet.getValueAt(i, 6);
            helmet_type = (String) tblHelmet.getValueAt(i, 7);
            supplier = (String) tblHelmet.getValueAt(i, 8);
            visorType = (String) tblHelmet.getValueAt(i, 9);

            // Create a new HelmetModel object with the extracted details
            modelArray[i] = new HelmetModel(helmetId, brand, price, 
                    helmetSize, material, helmetWeight, color, helmet_type, 
                    supplier, visorType);
        }
    }

    private void btnAddDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDataActionPerformed
        boolean isValidInput;
        DefaultTableModel tableModel = (DefaultTableModel) tblHelmet.getModel();
        int rowCount = tableModel.getRowCount();
        
        if(tfAddBrand.getText().isEmpty() 
                || tfAddColor.getText().isEmpty()
                || tfAddMaterial.getText().isEmpty() 
                || tfAddSupplier.getText().isEmpty() 
                || tfVisorType.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(this, 
                       "The fields must not be empty", "Input Error",
                       JOptionPane.ERROR_MESSAGE);
            return;
        }        
        else{
            try {
                helmetId = Integer.parseInt(tfAddId.getText());
                price = Integer.parseInt(tfAddPrice.getText());
                helmetWeight = Integer.parseInt(tfAddWeight.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, 
                   "Please input numeric data on helmet id, price and weight.", 
                   "Input Error",
                   JOptionPane.ERROR_MESSAGE);
            return;
            }
        }
        
        // Check if the helmetId already exists in the table
        for (int i = 0; i < rowCount; i++) {
            int existingHelmetId = (int) tableModel.getValueAt(i, 0);
            if (existingHelmetId == helmetId) {
                JOptionPane.showMessageDialog(
                        this, "Helmet ID already exists. "
                                + "Please enter valid id.", "Input Error", 
                                JOptionPane.ERROR_MESSAGE);
                return;
            }
        } 

        if (helmetId <= 0 || price <= 0 || helmetWeight <= 0) {
            JOptionPane.showMessageDialog(this, 
                   "Helmet Id, price or helmet weight cannot be less than or equal to zero.", 
                   "Input Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (price <= 2500 || helmetWeight <= 500) {
            JOptionPane.showMessageDialog(this, 
                   "Price or weight is less than minimum requirement" 
                           + "  Min Price = 2500"
                           + "  Min Weight = 500", "Input Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (price >= 100000 || helmetWeight > 6000){
            JOptionPane.showMessageDialog(this, 
                    "Price or Helmet weight exceeds our limit", "Input Error", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // For checking symbols
        brand = tfAddBrand.getText().trim();
        if(checksSpecialCharacters(brand)){
            JOptionPane.showMessageDialog(this, "Symbol are not allowed in Brand","Input Error",JOptionPane.ERROR_MESSAGE);
            return;
        }

        material = tfAddMaterial.getText().trim();
        if(checksSpecialCharacters(material)){
            JOptionPane.showMessageDialog(this, "Symbol are not allowed in Material","Input Error",JOptionPane.ERROR_MESSAGE);
            return;
        }

            color = tfAddColor.getText().trim();
        if(checksSpecialCharacters(color)){
            JOptionPane.showMessageDialog(this, "Symbol are not allowed in Color","Input Error",JOptionPane.ERROR_MESSAGE);
            return;
        }

            supplier = tfAddSupplier.getText().trim();
        if(checksSpecialCharacters(supplier)){
            JOptionPane.showMessageDialog(this, "Symbol are not allowed","Input Error",JOptionPane.ERROR_MESSAGE);
            return;
        }

            visorType = tfVisorType.getText().trim();
        if(checksSpecialCharacters(visorType)){
            JOptionPane.showMessageDialog(this, "Symbol are not allowed","Input Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
               
        // Set isValidInput to true if validation is successful
        isValidInput = true;
            
        if (isValidInput) {
            tableModel.addRow(new Object[]{helmetId, brand, price, 
                helmetSize, material, helmetWeight, color, helmet_type, 
                supplier, visorType});

            // After adding the new row, reinitialize the modelArray with updated data
            initializeModel();

            JOptionPane.showMessageDialog(this,
                    "Helmet successfully added.", "Addded Successful",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnAddDataActionPerformed

    private void btnDeleteDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDataActionPerformed
        boolean isValidInput = false;
        helmetId = 0;
        try {
            helmetId = Integer.parseInt(tfAddId.getText());
            if (helmetId <= 0) {
                JOptionPane.showMessageDialog(this, 
                        "Please enter valid ID.", "Input Error", 
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            isValidInput = true;

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,
                    "Please fill the form.", "Input Error", 
                    JOptionPane.ERROR_MESSAGE);
        }

        if (isValidInput) {
            DefaultTableModel tableModel = (DefaultTableModel) tblHelmet.getModel();
            int rowCount = tableModel.getRowCount();

            for (int i = 0; i < rowCount; i++) {
                int existingHelmetId = (int) tableModel.getValueAt(i, 0);

                if (existingHelmetId == helmetId) {
                    tableModel.removeRow(i);
                    initializeModel();
                    JOptionPane.showMessageDialog(this,
                            "Helmet successfully deleted.", 
                            "Deletion Successful", 
                            JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            }
            JOptionPane.showMessageDialog(
                    this, "Helmet ID not found. Please enter a valid ID.", 
                    "Input Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteDataActionPerformed

    private void btnModifyDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyDataActionPerformed
        DefaultTableModel tableModel = (DefaultTableModel) tblHelmet.getModel();
        int rowCount = tableModel.getRowCount();      
        if(tfAddBrand.getText().isEmpty() 
                || tfAddColor.getText().isEmpty()
                || tfAddMaterial.getText().isEmpty() 
                || tfAddSupplier.getText().isEmpty() 
                || tfVisorType.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(this, 
                       "The fields must not be empty", "Input Error",
                       JOptionPane.ERROR_MESSAGE);
            return;
        }        
        else{
            try {
                helmetId = Integer.parseInt(tfAddId.getText());
                price = Integer.parseInt(tfAddPrice.getText());
                helmetWeight = Integer.parseInt(tfAddWeight.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, 
                   "Please input numeric data on helmet id, price and weight.", 
                   "Input Error",
                   JOptionPane.ERROR_MESSAGE);
            return;
            }
        }
      
        boolean helmetIdFound = false;
        // Check if the helmet ID exists in the table
        for (int i = 0; i < rowCount; i++) {
            int existingHelmetId = (int) tableModel.getValueAt(i, 0);

            if (existingHelmetId == helmetId) {
                // Modify the existing row with the new data

                helmetSize = (String) tableModel.getValueAt(i, 3);
                helmet_type = (String) tableModel.getValueAt(i, 7);

                tableModel.setValueAt(tfAddBrand.getText().trim(), i, 1);
                tableModel.setValueAt(price, i, 2);
                tableModel.setValueAt(helmetSize, i, 3);
                tableModel.setValueAt(tfAddMaterial.getText().trim(), i, 4);
                tableModel.setValueAt(helmetWeight, i, 5);
                tableModel.setValueAt(tfAddColor.getText().trim(), i, 6);
                tableModel.setValueAt(helmet_type, i, 7);
                tableModel.setValueAt(tfAddSupplier.getText().trim(), i, 8);
                tableModel.setValueAt(tfVisorType.getText().trim(), i, 9);

                initializeModel();

                JOptionPane.showMessageDialog(this,
                    "Helmet information successfully modified.",
                    "Modification Successful",
                    JOptionPane.INFORMATION_MESSAGE);
                helmetIdFound = true;
                break;
            }
        }

        // Display an error message if the helmet ID is not found
        if (!helmetIdFound) {
            JOptionPane.showMessageDialog(this,
                "Helmet ID not found. Please enter an existing ID.",
                "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }           
           
        if (helmetId <= 0 || price <= 0 || helmetWeight <= 0) {
            JOptionPane.showMessageDialog(this, 
                   "Helmet Id, price or helmet weight cannot be less than or equal to zero.", 
                   "Input Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (price <= 2500 || helmetWeight <= 500) {
            JOptionPane.showMessageDialog(this, 
                   "Price or weight is less than minimum requirement" 
                           + "  Min Price = 2500"
                           + "  Min Weight = 500", "Input Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (price >= 100000 || helmetWeight > 6000){
            JOptionPane.showMessageDialog(this, 
                    "Price or Helmet weight exceeds our limit", "Input Error", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        brand = tfAddBrand.getText().trim();
        if(checksSpecialCharacters(brand)){
            JOptionPane.showMessageDialog(this, "Symbol are not allowed in Brand","Input Error",JOptionPane.ERROR_MESSAGE);
            return;
        }

        material = tfAddMaterial.getText().trim();
        if(checksSpecialCharacters(material)){
            JOptionPane.showMessageDialog(this, "Symbol are not allowed in Material","Input Error",JOptionPane.ERROR_MESSAGE);
            return;
        }

        color = tfAddColor.getText().trim();
        if(checksSpecialCharacters(color)){
            JOptionPane.showMessageDialog(this, "Symbol are not allowed in Color","Input Error",JOptionPane.ERROR_MESSAGE);
            return;
        }

        supplier = tfAddSupplier.getText().trim();
        if(checksSpecialCharacters(supplier)){
            JOptionPane.showMessageDialog(this, "Symbol are not allowed","Input Error",JOptionPane.ERROR_MESSAGE);
            return;
        }

        visorType = tfVisorType.getText().trim();
        if(checksSpecialCharacters(visorType)){
            JOptionPane.showMessageDialog(this, "Symbol are not allowed","Input Error",JOptionPane.ERROR_MESSAGE);
            return;
        }       
    }//GEN-LAST:event_btnModifyDataActionPerformed

    private void btnHelmIDSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelmIDSortActionPerformed
        InsertionSort insertSort = new InsertionSort();
        // Sort the modelArray using the insertion sort algorithm based on helmet ID
        modelArray = insertSort.insertionSortHelmetID(modelArray);

        updateTableFromHelmetModel();
    }//GEN-LAST:event_btnHelmIDSortActionPerformed

    private void btnPriceInsertionSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPriceInsertionSortActionPerformed
        InsertionSort insertSort = new InsertionSort();
        modelArray = insertSort.insertionSortHelmetPrice(modelArray);

        updateTableFromHelmetModel();
    }//GEN-LAST:event_btnPriceInsertionSortActionPerformed

    private void btnBrandSelectionSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrandSelectionSortActionPerformed
        SelectionSort selectSort = new SelectionSort();
        modelArray = selectSort.selectionSortHelmetBrand(modelArray);

        updateTableFromHelmetModel();
    }//GEN-LAST:event_btnBrandSelectionSortActionPerformed

    private void btnSizeSelectionSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSizeSelectionSortActionPerformed
        SelectionSort selectSort = new SelectionSort();
        modelArray = selectSort.selectionSortSize(modelArray);

        updateTableFromHelmetModel();
    }//GEN-LAST:event_btnSizeSelectionSortActionPerformed

    private void updateTableFromHelmetModel() {
        DefaultTableModel tableModel = (DefaultTableModel) tblHelmet.getModel();
        tableModel.setRowCount(0); // Clear existing rows

        for (HelmetModel helmet : modelArray) {
            tableModel.addRow(new Object[]{
                helmet.getHelmetId(),
                helmet.getBrand(),
                helmet.getPrice(),
                helmet.getHelmetSize(),
                helmet.getMaterial(),
                helmet.getHelmetWeight(),
                helmet.getColor(),
                helmet.getHelmet_type(),
                helmet.getSupplier(),
                helmet.getVisorType()
            });
        }
    }

    private boolean checksSpecialCharacters(String input) {
        // Define a string containing the set of special characters
        String specialCharacters = "~`!@#$%^&*()-_+=<>?,./[]{}\\|;:'\"";

        for (char c : input.toCharArray()) {
            // Check if the current character is a special character
            if (specialCharacters.contains(String.valueOf(c))) {
                return true;
            }
        }
        return false;
      }

    private void btnBinarySearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBinarySearchActionPerformed
        String searchKey = tfBinarySearch.getText();
        String selectedOption = (String) cbBinarySearch.getSelectedItem();
       
        int resultIndex = -1;

        // Create an instance of the BinarySearchAlgorithm
        BinarySearchAlgorithm searchAlgorithm = new BinarySearchAlgorithm();
        Object key = null;
        // Perform binary search based on the selected search option
        switch (selectedOption) {
            case "Brand":
                SelectionSort selectionSort = new SelectionSort();
                modelArray = selectionSort.selectionSortHelmetBrand(modelArray);
                resultIndex = searchAlgorithm.searchBrand(modelArray, 0, modelArray.length -1, searchKey);
                updateTableFromHelmetModel();
               
                key = searchKey;
                break;
            case "Helmet ID":
                InsertionSort insertID = new InsertionSort();
                modelArray = insertID.insertionSortHelmetID(modelArray);
                resultIndex = searchAlgorithm.searchID(modelArray, 0, modelArray.length -1, Integer.parseInt(searchKey));
                updateTableFromHelmetModel();
               
                key = searchKey;
               
                break;
            case "Price":
                InsertionSort insertPrice = new InsertionSort();
                modelArray = insertPrice.insertionSortHelmetPrice(modelArray);
                resultIndex = searchAlgorithm.searchPrice(modelArray, 0, modelArray.length -1, Integer.parseInt(searchKey));
                updateTableFromHelmetModel();
               
                key = searchKey;
               
                break;
            default:
                JOptionPane.showMessageDialog(this, "Invalid search option.");
                break;
        }
        if (resultIndex != -1) {
            JOptionPane.showMessageDialog(this, " "+ selectedOption + " found at index " + resultIndex, "Search Result", JOptionPane.INFORMATION_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(this, "Element not found", "Search Result", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnBinarySearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HeadGuard_Heaven.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HeadGuard_Heaven.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HeadGuard_Heaven.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HeadGuard_Heaven.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HeadGuard_Heaven().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddData;
    private javax.swing.JButton btnBinarySearch;
    private javax.swing.JButton btnBrandSelectionSort;
    private javax.swing.JButton btnDeleteData;
    private javax.swing.JButton btnHelmIDSort;
    private javax.swing.JButton btnModifyData;
    private javax.swing.JButton btnPriceInsertionSort;
    private javax.swing.JButton btnSizeSelectionSort;
    private javax.swing.JComboBox<String> cbAddHelType;
    private javax.swing.JComboBox<String> cbAddSize;
    private javax.swing.JComboBox<String> cbBinarySearch;
    private javax.swing.JLabel lblHelmetTitle;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlTitle;
    private javax.swing.JPanel pnlUpdateData;
    private javax.swing.JScrollPane spHelmets;
    private javax.swing.JTable tblHelmet;
    private javax.swing.JTextField tfAddBrand;
    private javax.swing.JTextField tfAddColor;
    private javax.swing.JTextField tfAddId;
    private javax.swing.JTextField tfAddMaterial;
    private javax.swing.JTextField tfAddPrice;
    private javax.swing.JTextField tfAddSupplier;
    private javax.swing.JTextField tfAddWeight;
    private javax.swing.JTextField tfBinarySearch;
    private javax.swing.JTextField tfVisorType;
    // End of variables declaration//GEN-END:variables
}
